# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Give gradlew permission
      run: chmod +x ./gradlew
    
    - name: Build with Gradle (skip tests)
      run: ./gradlew clean build -x test

  
      #	Build된 프로젝트 디렉토리 .에 복사
    - name: Copy jar
      run: |
           mkdir -p deploy
           cp build/libs/demo-0.0.1-SNAPSHOT.jar deploy/joyuri.jar
           cp appspec.yml deploy/
           cp -r scripts/ deploy/
           cd deploy
           zip -r ../backend.zip .
      #	Access Key와 Secret Access Key를 통해 권한을 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려짐.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려짐.
        aws-region: ap-northeast-2

    # - name: Upload to S3
    #   run: aws s3 cp ./backend.zip s3://mybucket-ces-joyuri/joyuri/backend.zip

    # - name: Deploy with CodeDeploy
    #   run: |
    #        aws deploy create-deployment \
    #        --application-name springboot-app \
    #        --deployment-group-name springboot-dg \
    #        --s3-location bucket=mybucket-ces-joyuri,bundleType=zip,key=joyuri/backend.zip \
    #        --region ap-northeast-2


    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1  

    - name: Build and Push Docker image
      run: |
       docker build -t joyuri-backend:latest .
       docker tag joyuri-backend:latest 575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:latest
       docker push 575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:latest

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ap-northeast-2 --name my-eks-cluster

    - name: Deploy to EKS (using latest tag) 🚀
      run: |
        kubectl set image deployment/backend-deployment \
        backend-container=575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:latest \
        
