# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Give gradlew permission
      run: chmod +x ./gradlew
    
    - name: Build with Gradle (skip tests)
      run: ./gradlew clean build -x test

  
      #	Build된 프로젝트 디렉토리 .에 복사
    - name: Copy jar
      run: |
           mkdir -p deploy
           cp build/libs/demo-0.0.1-SNAPSHOT.jar deploy/joyuri.jar
           cp appspec.yml deploy/
           cp -r scripts/ deploy/
           cd deploy
           zip -r ../backend.zip .
      #	Access Key와 Secret Access Key를 통해 권한을 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려짐.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려짐.
        aws-region: ap-northeast-2

    # - name: Upload to S3
    #   run: aws s3 cp ./backend.zip s3://mybucket-ces-joyuri/joyuri/backend.zip

    # - name: Deploy with CodeDeploy
    #   run: |
    #        aws deploy create-deployment \
    #        --application-name springboot-app \
    #        --deployment-group-name springboot-dg \
    #        --s3-location bucket=mybucket-ces-joyuri,bundleType=zip,key=joyuri/backend.zip \
    #        --region ap-northeast-2
    - name: write application.properties
      run: |
        cat << EOF >> application.properties_git
        aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}
        aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EOF
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1  

    - name: Build and Push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: 575108943098.dkr.ecr.ap-northeast-2.amazonaws.com
        ECR_REPOSITORY: joyuri_backend
      run: |
       docker build -t joyuri-backend:$IMAGE_TAG .

       FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
       echo "만들어진 도커 이미지 주소: $FULL_IMAGE_URI"
       
       docker tag joyuri-backend:$IMAGE_TAG 575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:$IMAGE_TAG
       docker push 575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:$IMAGE_TAG

       echo "FULL_IMAGE_URI=$FULL_IMAGE_URI" >> $GITHUB_ENV

    - name: Checkout K8s manifest repository
      uses: actions/checkout@v4
      with:
        repository: dmstjq800/joyuri_k8s
        path: joyuri_k8s
        token: ${{ secrets.GH_PAT }} 
        
    - name: Update Kubernetes manifest (backend.yaml)
      run: |
        TARGET_FILE="joyuri_k8s/backend.yaml"
        NEW_IMAGE_URI="${{ env.FULL_IMAGE_URI }}" 

        echo " değiştireceğimiz dosya $TARGET_FILE, yeni resim: $NEW_IMAGE_URI" # 터키어가 살짝...?! 헤헤, "바꿀 파일: $TARGET_FILE, 새 이미지: $NEW_IMAGE_URI" 😅

        if [ ! -f "$TARGET_FILE" ]; then
          echo "$TARGET_FILE 파일이 없어요! 확인해주세요!"
          exit 1
        fi
        sed -i "s|image: \"\"|image: \"${NEW_IMAGE_URI}\"|g" "$TARGET_FILE"
        if grep -q "$NEW_IMAGE_URI" "$TARGET_FILE"; then
          echo " $TARGET_FILE 파일에 새 이미지 주소 쓰기 성공!"
        else
          echo "뭔가 잘못됐나 봐요."
          exit 1
        fi

    - name: Commit and push Kubernetes manifest changes
      run: |
        cd joyuri_k8s # joyuri_k8s 폴더로 숑~ 이동!
        
        # git 설정! 내가 커밋한 거 아니고 액션봇이 한 거라고 이름표 붙여주기! 🤖
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add backend.yaml # 바뀐 backend.yaml 파일 스테이징!
        
        # 혹시 바뀐 게 없으면 커밋 안 하도록 체크! 똑똑이! 😎
        if git diff --staged --quiet; then
          echo "🤷 어라? backend.yaml 파일에 바뀐 내용이 없네요! 이미 최신인가 봐요!"
        else
          echo "✅ backend.yaml 파일이 바뀌었어요! 지금 바로 커밋하고 푸시할게요!슝~"
          # 커밋 메시지에 어떤 이미지로 바꿨는지 태그도 같이 적어주면 나중에 보기 편하겠죠? 🥰
          git commit -m "Update backend image to ${{ github.sha }}" -m "Image URI: ${{ env.FULL_IMAGE_URI }}"
          # joyuri_k8s 저장소의 기본 브랜치(master 또는 main)로 푸시할 거예요!
          git push 
          echo "🚀 dmstjq800/joyuri_k8s 저장소로 바뀐 backend.yaml 파일 업로드 완료!"
        fi
    
    # - name: Update kubeconfig
    #   run: aws eks update-kubeconfig --region ap-northeast-2 --name my-eks-cluster

    # - name: Deploy to EKS (using latest tag) 🚀
    #   run: |
    #     kubectl set image deployment/backend-deployment \
    #     backend-container=575108943098.dkr.ecr.ap-northeast-2.amazonaws.com/joyuri_backend:$IMAGE_TAG \
        
